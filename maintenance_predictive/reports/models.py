from django.db import models

COMPONENT_CHOICES = sorted(['Réducteur de vitesse Flender',
 'Boîte de transmission Bosch Rexroth',
 'Éolienne Vestas V90',
 'Système d’orientation de nacelle',
 'Frein de rotor Svendborg',
 'Arbre principal SKF 800mm',
 'Palier de moyeu GE Wind Energy',
 'Système hydraulique de freinage Parker',
 'Éolienne Siemens Gamesa SG 2.1',
 'Support d’orientation axial Nordex',
 'Module de sécurité mécanique Nidec',
 'Ressort de rappel Enerdrive',
 'Guindeau industriel Leroy-Somer',
 'Ensemble de fixation Rotek',
 'Enveloppe externe nacelle',
 'Guide de palier H-Tech',
 'Traverse de rotation SMC',
 'Pignons d’entraînement Transtecno',
 'Module principal de rotation',
 'Onduleur principal',
 'Ligne AC / Alimentation secteur',
 'Disjoncteurs / Protection',
 'Fusibles',
 'Transformateur',
 'Phases et Réseau triphasé',
 'Boîtier de jonction / câblage',
 'Contrôle / Commande',
 'Système de refroidissement électrique',
 'Bornier / Connexions',
 'Régulation / Contrôleur',
 'Condensateurs',
 'Barrière anti-retour',
 'Parasites / EMI',
 'PWM / Sortie signal',
 'Rendement / Température',
 'Charge / Impédance',
 'Stabilité / Fréquence',
 'Relais / Commutation',
 'Surcharge / Court-circuit',
 'Tension crête',
 'SCADA',
 'API/communication',
 'Firmware',
 'Base de données',
 'Gestion mémoire',
 'Analyse/logs',
 'Sécurité/authentification',
 'Modbus/communication locale',
 'Synchronisation',
 "Erreurs d'exécution",
 'Performance',
 'Transactions et rollback',
 'Configuration système',
 'Compatibilité logicielle',
 'Session/utilisateur',
 'MQTT',
 'Date/heure',
 'Surveillance/monitoring',
 'Endpoints/API',
 'Quota et accès',
 'capteur température',
 'capteur vent',
 'capteur irradiance',
 'capteur vibration',
 'capteur multifonction',
 'capteur pressions',
 'boîtier capteur',
 'microcontroleur interne',
 'capteur thermique',
 'capteur monté',
 'filtrage et bruit',
 'protocole et transmission',
 'capteur uv',
 'capteur mémoire',
 'capteur remise sous tension',
 'capteur transitoire',
 'capteur resolution',
 'capteur electronique',
 'capteur humidité',
 'capteur oscillateur',
 'capteur shunt',
 'capteur diaphragme',
 'capteur liquide',
 'capteur courant',
 'mât principal',
 'pales',
 'attaches extérieures',
 'structures portantes',
 'fixations structurelles',
 'fondations',
 'plateforme d’ancrage',
 'peinture / revêtement',
 'soudure / joints',
 'plaques métalliques',
 'traverse principale',
 'corrosion / humidité',
 'rails / guidage',
 'comportement sous charge / vent',
 'dilatation thermique',
 'profilés métalliques',
 'fixations diverses',
 'limites mécaniques'], key=lambda x: x.lower())


class Report(models.Model):
    author = models.CharField(max_length=100)
    device = models.CharField(max_length=100, null=True, blank=True, help_text="Nom du dispositif (ex: Éolienne #3)")
    component = models.CharField(max_length=100, choices=[(d.title(), d.title()) for d in COMPONENT_CHOICES])
    text = models.TextField()
    created = models.DateTimeField(auto_now_add=True)
    fixed = models.BooleanField(default=False)
    score = models.FloatField(null=True, blank=True)

    def __str__(self):
        return f"{self.component} - {self.created.strftime('%Y-%m-%d')}"
